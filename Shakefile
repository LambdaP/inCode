{-# OPTIONS_GHC -fno-warn-wrong-do-bind #-}

module Main where

import Development.Shake
import Control.Monad
import Control.Monad.IO.Class
import System.Directory
import Development.Shake.FilePath
import Control.Applicative ((<$>))

opts = shakeOptions { shakeFiles    = ".shake/"
                    , shakeVersion  = "1.0"
                    , shakeThreads  = 32
                    -- , shakeReport   = Just "profile.html"
                    , shakeProgress = progressSimple
                    }

binPath = ".cabal-sandbox/bin"
-- cmdBin = cmd . (++) binPath
-- systemBin = system' . (++) binPath

bin = (binPath </>)

main :: IO ()
main = shakeArgs opts $ do
  want ["build"]

  "clean" ~> removeFilesAfter ".shake" ["//*"]

  "build" ~> do
    need $ map bin
        [ "blog-scripts-migrate"
        , "blog-scripts-seed"
        , "blog-scripts-load-entries"
        , "blog" ]
    return ()

  "configure" ~>
    cmd "cabal configure"

  "launch" ~> do
    need [bin "blog"]
    system' (bin "blog") []

  "deploy" ~> do
    need [bin "blog"]
    liftIO $ createDirectoryIfMissing True "bin"
    copyFile' (bin "blog") "bin/blog"
    cmd "git" ["add", "-f", "bin/blog"]

  "migrate" ~> do
    need [bin "blog-scripts-migrate"]
    cmd (bin "blog-scripts-migrate")

  "seed" ~> do
    need [bin "blog-scripts-seed"]
    cmd (bin "blog-scripts-seed")

  "load-entries" ~> do
    need [bin "blog-scripts-load-entries"]
    cmd (bin "blog-scripts-load-entries")

  "watch-copy" ~>
    cmd "scripts/watch_copy.sh"

  "watch-scss" ~>
    cmd "compass watch"

  bin "*" *> \f -> do
    need ["configure"]
    cmd "cabal" ["build", takeFileName f]
