{-# OPTIONS_GHC -fno-warn-wrong-do-bind #-}

module Main where

import Development.Shake
import Control.Monad
import Control.Monad.IO.Class
import System.Directory
import Control.Applicative ((<$>))

opts = shakeOptions { shakeFiles    = ".shake/"
                    , shakeProgress = progressSimple }

binPath = "cabal-dev/bin/"
cmdBin = cmd . (++) binPath
systemBin = system' . (++) binPath

main :: IO ()
main = shakeArgs opts $ do
  want ["build"]

  "clean" ~> removeFilesAfter ".shake" ["//*"]

  "build" ~>
    need [ "cabal-dev/bin/blog" ]

  "launch" ~> do
    need ["build"]
    systemBin "blog" []

  "deploy" ~> do
    need ["build"]
    liftIO $ createDirectoryIfMissing True "bin"
    copyFile' "dist/build/blog/blog" "bin/blog"
    cmd "git" ["add", "-f", "bin/blog"]



  "migrate" ~> do
    need ["cabal-dev/bin/blog-scripts-migrate"]
    cmdBin "blog-scripts-migrate"

  "seed" ~> do
    need ["cabal-dev/bin/blog-scripts-seed"]
    cmdBin "blog-scripts-seed"

  "load-entries" ~> do
    need ["cabal-dev/bin/blog-scripts-load-entries"]
    cmdBin "blog-scripts-load-entries"

  "view-src" ~> do
    fs <- srcFiles
    liftIO $ print fs

  "watch-copy" ~>
    cmd "scripts/watch_copy.sh"

  "watch-scss" ~>
    cmd "compass watch"


  "cabal-dev/bin/blog" *> \_ -> do
    need <$> srcFiles
    cmd "cabal-dev" ["install"]

  "cabal-dev/bin/blog-scripts-migrate" *> \_ -> do
    need ["build"]
    return ()

  "cabal-dev/bin/blog-scripts-seed" *> \_ -> do
    need ["build"]
    return ()

  "cabal-dev/bin/blog-scripts-load-entries" *> \_ -> do
    need ["build"]
    return ()

srcFiles :: Action [FilePath]
srcFiles = getDirectoryFiles ""
  [ "blog.cabal"
  , "src/*.hs"
  , "src/scripts/*.hs"
  , "src/Config/*.hs"
  , "src/Web/Blog/*.hs"
  , "src/Web/Blog/*/*.hs"
  , "src/Web/Blog/*/*/*.hs"
  , "src/Web/Blog/*/*/*/*.hs"
  , "src/Development/Blog/*.hs"
  , "src/Development/Blog/*/*.hs" ]
